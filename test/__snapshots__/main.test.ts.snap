// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "TwitterBearerTokenParameter": Object {
      "NoEcho": true,
      "Type": "String",
    },
  },
  "Resources": Object {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": Object {
      "DependsOn": Array [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "9ab58259097ac1249b4061ac6e823f78810b11c4c760a30324f6d012fe8e6440.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AnalyzeFunction5A98DC09": Object {
      "DependsOn": Array [
        "AnalyzeFunctionServiceRoleDefaultPolicyC2F006BE",
        "AnalyzeFunctionServiceRole2A2C257B",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "ddc85756599db9040a15e953ca4c0ce7cccb058610a33e149b0a8e2799061c5e.zip",
        },
        "Description": "[SocialAnalytics] Amazon Comprehend",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "COMPREHEND_JOB_ARN": Object {
              "Ref": "ComprehendJobStateMachine877998A5",
            },
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "AnalyzeFunction",
            "TWEET_TABLE_NAME": Object {
              "Ref": "TweetTable97F090DB",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:aws:lambda:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":580247275435:layer:LambdaInsightsExtension-Arm64:2",
              ],
            ],
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "AnalyzeFunctionServiceRole2A2C257B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "AnalyzeFunctionDynamoDBEventSourcetestTweetTable04D577993C12838A": Object {
      "Properties": Object {
        "BatchSize": 100,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "TweetTable97F090DB",
            "StreamArn",
          ],
        },
        "FunctionName": Object {
          "Ref": "AnalyzeFunction5A98DC09",
        },
        "MaximumBatchingWindowInSeconds": 10,
        "MaximumRecordAgeInSeconds": 86400,
        "StartingPosition": "LATEST",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "AnalyzeFunctionServiceRole2A2C257B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AnalyzeFunctionServiceRoleDefaultPolicyC2F006BE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "dynamodb:ListStreams",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TweetTable97F090DB",
                  "StreamArn",
                ],
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TweetTable97F090DB",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TweetTable97F090DB",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "states:StartSyncExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ComprehendJobStateMachine877998A5",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AnalyzeFunctionServiceRoleDefaultPolicyC2F006BE",
        "Roles": Array [
          Object {
            "Ref": "AnalyzeFunctionServiceRole2A2C257B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ArchiveFilterFunction81E5C2D0": Object {
      "DependsOn": Array [
        "ArchiveFilterFunctionServiceRole67EDC4DF",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "940c86b6737d7b31f802e5c6af791d3b8111547d713da3ebfe067f27e48eeff9.zip",
        },
        "Description": "[SocialAnalytics] Filtering with backup flag",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "ArchiveFilterFunction",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ArchiveFilterFunctionServiceRole67EDC4DF",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ArchiveFilterFunctionServiceRole67EDC4DF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Bucket83908E77": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "Prefix": "raw",
              "Status": "Enabled",
              "Transitions": Array [
                Object {
                  "StorageClass": "INTELLIGENT_TIERING",
                  "TransitionInDays": 0,
                },
              ],
            },
          ],
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:cr-owned:opensearch/packages/:8bae5dbc",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "BucketAllowBucketNotificationsTotestOpenSearchPackagesRegisterFunction51C3D6FB3E6375B2": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "OpenSearchPackagesRegisterFunction7CDCEE20",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "Bucket83908E77",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BucketNotifications8F2E257D": Object {
      "DependsOn": Array [
        "BucketAllowBucketNotificationsTotestOpenSearchPackagesRegisterFunction51C3D6FB3E6375B2",
        "ReingestTweetsV1FunctionQueuePolicyF98579A3",
        "ReingestTweetsV1FunctionQueueBCFE63A8",
        "ReingestTweetsV2FunctionQueuePolicy0BCB3395",
        "ReingestTweetsV2FunctionQueue00EE7A69",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "Bucket83908E77",
        },
        "Managed": true,
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "Filter": Object {
                "Key": Object {
                  "FilterRules": Array [
                    Object {
                      "Name": "suffix",
                      "Value": ".txt",
                    },
                    Object {
                      "Name": "prefix",
                      "Value": "opensearch/packages/",
                    },
                  ],
                },
              },
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "OpenSearchPackagesRegisterFunction7CDCEE20",
                  "Arn",
                ],
              },
            },
          ],
          "QueueConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "Filter": Object {
                "Key": Object {
                  "FilterRules": Array [
                    Object {
                      "Name": "prefix",
                      "Value": "reingest/tweets/v1/",
                    },
                  ],
                },
              },
              "QueueArn": Object {
                "Fn::GetAtt": Array [
                  "ReingestTweetsV1FunctionQueueBCFE63A8",
                  "Arn",
                ],
              },
            },
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "Filter": Object {
                "Key": Object {
                  "FilterRules": Array [
                    Object {
                      "Name": "prefix",
                      "Value": "reingest/tweets/v2/",
                    },
                  ],
                },
              },
              "QueueArn": Object {
                "Fn::GetAtt": Array [
                  "ReingestTweetsV2FunctionQueue00EE7A69",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client(\\"s3\\")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = [\\"TopicConfigurations\\", \\"QueueConfigurations\\", \\"LambdaFunctionConfigurations\\"]

def handler(event: dict, context):
  response_status = \\"SUCCESS\\"
  error_message = \\"\\"
  try:
    props = event[\\"ResourceProperties\\"]
    bucket = props[\\"BucketName\\"]
    notification_configuration = props[\\"NotificationConfiguration\\"]
    request_type = event[\\"RequestType\\"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception(\\"Failed to put bucket notification configuration\\")
    response_status = \\"FAILED\\"
    error_message = f\\"Error: {str(e)}. \\"
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f\\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\\"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\\"{stack_id}-\\")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      \\"Status\\": response_status,
      \\"Reason\\": f\\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\\",
      \\"PhysicalResourceId\\": event.get(\\"PhysicalResourceId\\") or event[\\"LogicalResourceId\\"],
      \\"StackId\\": event[\\"StackId\\"],
      \\"RequestId\\": event[\\"RequestId\\"],
      \\"LogicalResourceId\\": event[\\"LogicalResourceId\\"],
      \\"NoEcho\\": False,
    }
  ).encode(\\"utf-8\\")
  headers = {\\"content-type\\": \\"\\", \\"content-length\\": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event[\\"ResponseURL\\"], headers=headers, data=response_body, method=\\"PUT\\")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode(\\"utf-8\\"))
    print(\\"Status code: \\" + response.reason)
  except Exception as e:
      print(\\"send(..) failed executing request.urlopen(..): \\" + str(e))
",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.7",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ComprehendJobB64DecodeFunctionCFAE8AF0": Object {
      "DependsOn": Array [
        "ComprehendJobB64DecodeFunctionServiceRoleAE097ABD",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "13cdb42b88315cc505e2128bc8ac099065f4228aff0afb6c07f9898cd63dae4f.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "ComprehendWithCache",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ComprehendJobB64DecodeFunctionServiceRoleAE097ABD",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ComprehendJobB64DecodeFunctionServiceRoleAE097ABD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ComprehendJobB64EncodeFunctionE10510B6": Object {
      "DependsOn": Array [
        "ComprehendJobB64EncodeFunctionServiceRole6283ED2A",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "91255304de7624692ed2ac723255e3718b1d5fc2182067512b4a40b0d28e5e09.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "CACHE_EXPIRE_DAYS": "14",
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "ComprehendWithCache",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ComprehendJobB64EncodeFunctionServiceRole6283ED2A",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ComprehendJobB64EncodeFunctionServiceRole6283ED2A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ComprehendJobCacheTable2D64C528": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "TimeToLiveSpecification": Object {
          "AttributeName": "expire",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "ComprehendJobLogs46527FF7": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 14,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ComprehendJobNormalizeFunction49B1DB7D": Object {
      "DependsOn": Array [
        "ComprehendJobNormalizeFunctionServiceRoleDCC912C2",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "ddfe9bbd95336f012f543a3dab7cc6fca7513af77a56e664719d4dbbc9d04b68.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "ComprehendWithCache",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ComprehendJobNormalizeFunctionServiceRoleDCC912C2",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ComprehendJobNormalizeFunctionServiceRoleDCC912C2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ComprehendJobStateMachine877998A5": Object {
      "DependsOn": Array [
        "ComprehendJobStateMachineRoleDefaultPolicyF1625302",
        "ComprehendJobStateMachineRole8E097225",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"Invoke\\",\\"States\\":{\\"Invoke\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"input.$\\":\\"$\\"},\\"Next\\":\\"Normalize Text\\"},\\"Normalize Text\\":{\\"Next\\":\\"Text empty?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"InputPath\\":\\"$.input\\",\\"ResultSelector\\":{\\"input.$\\":\\"$\\",\\"CacheKey.$\\":\\"$.CacheKey\\"},\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "ComprehendJobNormalizeFunction49B1DB7D",
                  "Arn",
                ],
              },
              "\\"},\\"Text empty?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.input.Text\\",\\"StringEquals\\":\\"\\",\\"Next\\":\\"EmpryResponse\\"}],\\"Default\\":\\"Get Cache\\"},\\"Get Cache\\":{\\"Next\\":\\"CacheHit?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":2}],\\"Type\\":\\"Task\\",\\"InputPath\\":\\"$.CacheKey\\",\\"ResultPath\\":\\"$.Cache\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:getItem\\",\\"Parameters\\":{\\"Key\\":{\\"id\\":{\\"S.$\\":\\"$\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "ComprehendJobCacheTable2D64C528",
              },
              "\\",\\"ConsistentRead\\":false}},\\"CacheHit?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.Cache.Item.value.B\\",\\"IsPresent\\":true,\\"Next\\":\\"Decode Cache\\"}],\\"Default\\":\\"LanguageCode supported?\\"},\\"LanguageCode supported?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Or\\":[{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"ar\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"hi\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"ko\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"zh-TW\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"ja\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"zh\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"de\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"pt\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"en\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"it\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"fr\\"},{\\"Variable\\":\\"$.input.LanguageCode\\",\\"StringEquals\\":\\"es\\"}],\\"Next\\":\\"Detection\\"}],\\"Default\\":\\"Translate\\"},\\"Translate\\":{\\"Next\\":\\"Detection\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":1}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"ResultPath\\":\\"$.error\\",\\"Next\\":\\"EmpryResponse\\"}],\\"Type\\":\\"Task\\",\\"InputPath\\":\\"$.input\\",\\"ResultPath\\":\\"$.input\\",\\"ResultSelector\\":{\\"Text.$\\":\\"$.TranslatedText\\",\\"LanguageCode\\":\\"en\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::aws-sdk:translate:translateText\\",\\"Parameters\\":{\\"Text.$\\":\\"$.Text\\",\\"SourceLanguageCode\\":\\"auto\\",\\"TargetLanguageCode\\":\\"en\\"}},\\"Detection\\":{\\"Type\\":\\"Parallel\\",\\"ResultPath\\":\\"$.Comprehend\\",\\"Next\\":\\"Generate Response\\",\\"InputPath\\":\\"$.input\\",\\"Branches\\":[{\\"StartAt\\":\\"Detect Entities\\",\\"States\\":{\\"Detect Entities\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":20}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::aws-sdk:comprehend:detectEntities\\",\\"Parameters\\":{\\"Text.$\\":\\"$.Text\\",\\"LanguageCode.$\\":\\"$.LanguageCode\\"}}}},{\\"StartAt\\":\\"Detect Sentiment\\",\\"States\\":{\\"Detect Sentiment\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":20}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::aws-sdk:comprehend:detectSentiment\\",\\"Parameters\\":{\\"Text.$\\":\\"$.Text\\",\\"LanguageCode.$\\":\\"$.LanguageCode\\"}}}}],\\"ResultSelector\\":{\\"Entities.$\\":\\"$[0].Entities\\",\\"Sentiment.$\\":\\"$[1].Sentiment\\",\\"SentimentScore.$\\":\\"$[1].SentimentScore\\"}},\\"Generate Response\\":{\\"Type\\":\\"Pass\\",\\"ResultPath\\":\\"$.Response\\",\\"Parameters\\":{\\"NormalizedText.$\\":\\"$.input.Text\\",\\"Entities.$\\":\\"$.Comprehend.Entities\\",\\"Sentiment.$\\":\\"$.Comprehend.Sentiment\\",\\"SentimentScore.$\\":\\"$.Comprehend.SentimentScore\\"},\\"Next\\":\\"Generate CacheValue\\"},\\"Generate CacheValue\\":{\\"Next\\":\\"Store Cache\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"InputPath\\":\\"$.Response\\",\\"ResultPath\\":\\"$.Cache\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "ComprehendJobB64EncodeFunctionE10510B6",
                  "Arn",
                ],
              },
              "\\"},\\"Store Cache\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"MaxAttempts\\":2}],\\"Type\\":\\"Task\\",\\"OutputPath\\":\\"$.Response\\",\\"ResultPath\\":\\"$.tmp\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::dynamodb:putItem\\",\\"Parameters\\":{\\"Item\\":{\\"id\\":{\\"S.$\\":\\"$.CacheKey\\"},\\"value\\":{\\"B.$\\":\\"$.Cache.Value\\"},\\"expire\\":{\\"N.$\\":\\"$.Cache.Expire\\"}},\\"TableName\\":\\"",
              Object {
                "Ref": "ComprehendJobCacheTable2D64C528",
              },
              "\\"}},\\"EmpryResponse\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"NormalizedText.$\\":\\"$.input.Text\\"},\\"End\\":true},\\"Decode Cache\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"InputPath\\":\\"$.Cache.Item.value.B\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "ComprehendJobB64DecodeFunctionCFAE8AF0",
                  "Arn",
                ],
              },
              "\\"}}}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::GetAtt": Array [
                    "ComprehendJobLogs46527FF7",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Level": "ERROR",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "ComprehendJobStateMachineRole8E097225",
            "Arn",
          ],
        },
        "StateMachineType": "EXPRESS",
        "TracingConfiguration": Object {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "ComprehendJobStateMachineRole8E097225": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ComprehendJobStateMachineRoleDefaultPolicyF1625302": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ComprehendJobNormalizeFunction49B1DB7D",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ComprehendJobNormalizeFunction49B1DB7D",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "ComprehendJobCacheTable2D64C528",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "translate:TranslateText",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ComprehendJobB64EncodeFunctionE10510B6",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ComprehendJobB64EncodeFunctionE10510B6",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "dynamodb:PutItem",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/",
                    Object {
                      "Ref": "ComprehendJobCacheTable2D64C528",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "comprehend:DetectEntities",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "comprehend:DetectSentiment",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "ComprehendJobB64DecodeFunctionCFAE8AF0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "ComprehendJobB64DecodeFunctionCFAE8AF0",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "comprehend:DetectDominantLanguage",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ComprehendJobStateMachineRoleDefaultPolicyF1625302",
        "Roles": Array [
          Object {
            "Ref": "ComprehendJobStateMachineRole8E097225",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ContainerInsightsCloudWatchConfigC7791928": Object {
      "Properties": Object {
        "Description": "CloudWatch-Agent SSM Parameters with EMF Definition for ECS Cluster",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"logs\\":{\\"metrics_collected\\":{\\"prometheus\\":{\\"log_group_name\\":\\"",
              Object {
                "Ref": "ContainerInsightsLogGroup6E1B4D3D",
              },
              "\\",\\"prometheus_config_path\\":\\"env:PROMETHEUS_CONFIG_CONTENT\\",\\"ecs_service_discovery\\":{\\"sd_frequency\\":\\"1m\\",\\"sd_result_file\\":\\"/tmp/cwagent_ecs_auto_sd.yaml\\",\\"docker_label\\":{},\\"task_definition_list\\":[{\\"sd_job_name\\":\\"emf/ecs-firelens-fluentbit\\",\\"sd_metrics_ports\\":\\"2020\\",\\"sd_task_definition_arn_pattern\\":\\".*:task-definition/testTwitterStreamingReaderTaskDefinitionF4210DB8:[0-9]+\\",\\"sd_metrics_path\\":\\"/api/v1/metrics/prometheus\\"}]},\\"emf_processor\\":{\\"metric_declaration\\":[{\\"source_labels\\":[\\"StartedBy\\"],\\"label_matcher\\":\\"^ecs-svc/.*\\",\\"dimensions\\":[[\\"ClusterName\\",\\"TaskGroup\\",\\"name\\"],[\\"ClusterName\\",\\"TaskDefinitionFamily\\",\\"name\\"],[\\"ClusterName\\",\\"instance\\",\\"name\\"]],\\"metric_selectors\\":[\\"^fluentbit_input_(records|bytes)_total$\\",\\"^fluentbit_output_proc_(records|bytes)_total$\\",\\"^fluentbit_output_errors_total$\\",\\"^fluentbit_output_retries_(total|failed_total)$\\"]}]}}},\\"force_flush_interval\\":5}}",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "ContainerInsightsEcsAutoDiscoveryPolicyADCEB7CE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:ListTasks",
                "ecs:ListServices",
                "ecs:DescribeContainerInstances",
                "ecs:DescribeServices",
                "ecs:DescribeTasks",
                "ecs:DescribeTaskDefinition",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ContainerInsightsEcsAutoDiscoveryPolicyADCEB7CE",
        "Roles": Array [
          Object {
            "Ref": "ContainerInsightsTaskDefinitionTaskRole1CE4BE83",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ContainerInsightsLogGroup6E1B4D3D": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 1,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ContainerInsightsPrometheusConfigE1A50196": Object {
      "Properties": Object {
        "Description": "Prometheus Scraping SSM Parameter for ECS Cluster",
        "Type": "String",
        "Value": "global:
  scrape_interval: 1m
  scrape_timeout: 10s
scrape_configs:
  - job_name: cwagent-ecs-file-sd-config
    sample_limit: 10000
    file_sd_configs:
      - files:
          - /tmp/cwagent_ecs_auto_sd.yaml
",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "ContainerInsightsService9E8DCF8F": Object {
      "Properties": Object {
        "Cluster": Object {
          "Ref": "TwitterStreamingReaderCluster31726261",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "EnableECSManagedTags": false,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "ContainerInsightsServiceSecurityGroup8DE88CE7",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPublicSubnet1SubnetB4246D30",
              },
              Object {
                "Ref": "VPCPublicSubnet2Subnet74179F39",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "ContainerInsightsTaskDefinitionEB8E7155",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ContainerInsightsServiceSecurityGroup8DE88CE7": Object {
      "Properties": Object {
        "GroupDescription": "test/ContainerInsights/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ContainerInsightsTaskDefinitionEB8E7155": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 256,
            "Essential": true,
            "Image": "public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "ContainerInsightsLogGroup6E1B4D3D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "insights",
              },
            },
            "MemoryReservation": 512,
            "Name": "cloudwatch-agent",
            "Secrets": Array [
              Object {
                "Name": "PROMETHEUS_CONFIG_CONTENT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      Object {
                        "Ref": "ContainerInsightsPrometheusConfigE1A50196",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "CW_CONFIG_CONTENT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter/",
                      Object {
                        "Ref": "ContainerInsightsCloudWatchConfigC7791928",
                      },
                    ],
                  ],
                },
              },
            ],
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "ContainerInsightsTaskDefinitionExecutionRoleA564D4AE",
            "Arn",
          ],
        },
        "Family": "testContainerInsightsTaskDefinitionA84C4616",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "ContainerInsightsTaskDefinitionTaskRole1CE4BE83",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ContainerInsightsTaskDefinitionExecutionRoleA564D4AE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ContainerInsightsTaskDefinitionExecutionRoleDefaultPolicy1F59CA93": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ContainerInsightsLogGroup6E1B4D3D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    Object {
                      "Ref": "ContainerInsightsPrometheusConfigE1A50196",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/",
                    Object {
                      "Ref": "ContainerInsightsCloudWatchConfigC7791928",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ContainerInsightsTaskDefinitionExecutionRoleDefaultPolicy1F59CA93",
        "Roles": Array [
          Object {
            "Ref": "ContainerInsightsTaskDefinitionExecutionRoleA564D4AE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ContainerInsightsTaskDefinitionTaskRole1CE4BE83": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ContainerInsightsTaskDefinitionTaskRoleDefaultPolicy4E8A0E84": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ContainerInsightsLogGroup6E1B4D3D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ContainerInsightsTaskDefinitionTaskRoleDefaultPolicy4E8A0E84",
        "Roles": Array [
          Object {
            "Ref": "ContainerInsightsTaskDefinitionTaskRole1CE4BE83",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": Object {
      "DependsOn": Array [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da.zip",
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Ref": "OpenSearchPackagesDeploymentAwsCliLayerADF8F738",
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.7",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": Array [
          Object {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DashboardAppLogs4099E214": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardAuditLogsD6A35512": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainAccessPolicyCustomResourcePolicy63DD89EF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "es:UpdateDomainConfig",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "DashboardDomainED696CAB",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DashboardDomainAccessPolicyCustomResourcePolicy63DD89EF",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DashboardDomainAccessPolicyD0E20C1B": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DashboardDomainAccessPolicyCustomResourcePolicy63DD89EF",
      ],
      "Properties": Object {
        "Create": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"action\\":\\"updateDomainConfig\\",\\"service\\":\\"OpenSearch\\",\\"parameters\\":{\\"DomainName\\":\\"",
              Object {
                "Ref": "DashboardDomainED696CAB",
              },
              "\\",\\"AccessPolicies\\":\\"{\\\\\\"Statement\\\\\\":[{\\\\\\"Action\\\\\\":\\\\\\"es:ESHttp*\\\\\\",\\\\\\"Effect\\\\\\":\\\\\\"Allow\\\\\\",\\\\\\"Principal\\\\\\":{\\\\\\"AWS\\\\\\":\\\\\\"*\\\\\\"},\\\\\\"Resource\\\\\\":\\\\\\"*\\\\\\"}],\\\\\\"Version\\\\\\":\\\\\\"2012-10-17\\\\\\"}\\"},\\"outputPaths\\":[\\"DomainConfig.AccessPolicies\\"],\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DashboardDomainED696CAB",
              },
              "AccessPolicy\\"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"action\\":\\"updateDomainConfig\\",\\"service\\":\\"OpenSearch\\",\\"parameters\\":{\\"DomainName\\":\\"",
              Object {
                "Ref": "DashboardDomainED696CAB",
              },
              "\\",\\"AccessPolicies\\":\\"{\\\\\\"Statement\\\\\\":[{\\\\\\"Action\\\\\\":\\\\\\"es:ESHttp*\\\\\\",\\\\\\"Effect\\\\\\":\\\\\\"Allow\\\\\\",\\\\\\"Principal\\\\\\":{\\\\\\"AWS\\\\\\":\\\\\\"*\\\\\\"},\\\\\\"Resource\\\\\\":\\\\\\"*\\\\\\"}],\\\\\\"Version\\\\\\":\\\\\\"2012-10-17\\\\\\"}\\"},\\"outputPaths\\":[\\"DomainConfig.AccessPolicies\\"],\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DashboardDomainED696CAB",
              },
              "AccessPolicy\\"}}",
            ],
          ],
        },
      },
      "Type": "Custom::OpenSearchAccessPolicy",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainBulkOperationRole5DCB8F6B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "cluster_permissions": Array [
            "indices:data/write/bulk",
          ],
          "description": "Provide the minimum permissions for a bulk operation user",
          "index_permissions": Array [
            Object {
              "allowed_actions": Array [
                "write",
                "create_index",
              ],
              "index_patterns": Array [
                "tweets-*",
              ],
            },
          ],
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": "bulk_operation",
        "path": "_plugins/_security/api/roles/",
      },
      "Type": "Custom::OpenSearchRole",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainBulkOperationRoleMapping1B903E09": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "backend_roles": Array [
            Object {
              "Fn::GetAtt": Array [
                "OpenSearchLoaderFunctionServiceRole32276686",
                "Arn",
              ],
            },
          ],
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainBulkOperationRole5DCB8F6B",
            "Name",
          ],
        },
        "path": "_plugins/_security/api/rolesmapping/",
      },
      "Type": "Custom::OpenSearchRoleMapping",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainConsoleRoleF2990B82": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "cluster_permissions": Array [
            "cluster:monitor/health",
          ],
          "description": "Provide the minimum permissions for aws console user",
          "index_permissions": Array [
            Object {
              "allowed_actions": Array [
                "indices:monitor/stats",
                "indices:admin/mappings/get",
              ],
              "index_patterns": Array [
                "*",
              ],
            },
          ],
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": "aws_console",
        "path": "_plugins/_security/api/roles/",
      },
      "Type": "Custom::OpenSearchRole",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainConsoleRoleMappingC523696E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "backend_roles": Array [
            Object {
              "Fn::Join": Array [
                "",
                Array [
                  "arn:aws:iam::",
                  Object {
                    "Ref": "AWS::AccountId",
                  },
                  ":role/*",
                ],
              ],
            },
          ],
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainConsoleRoleF2990B82",
            "Name",
          ],
        },
        "path": "_plugins/_security/api/rolesmapping/",
      },
      "Type": "Custom::OpenSearchRoleMapping",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainDefaultSnapshotRepoEFE66608": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DashboardSnapshotRoleDefaultPolicyEF231DDD",
        "DashboardSnapshotRole792BAAA0",
      ],
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "settings": Object {
            "base_path": "opensearch/snapshot",
            "bucket": Object {
              "Ref": "Bucket83908E77",
            },
            "role_arn": Object {
              "Fn::GetAtt": Array [
                "DashboardSnapshotRole792BAAA0",
                "Arn",
              ],
            },
          },
          "type": "s3",
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": "default",
        "path": "_snapshot/",
      },
      "Type": "Custom::OpenSearchSnapshotRepo",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainED696CAB": Object {
      "DeletionPolicy": "Retain",
      "DependsOn": Array [
        "DashboardDomainESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611CustomResourcePolicy49AD4ACE",
        "DashboardDomainESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611830181CB",
      ],
      "Properties": Object {
        "AdvancedSecurityOptions": Object {
          "Enabled": true,
          "InternalUserDatabaseEnabled": false,
          "MasterUserOptions": Object {
            "MasterUserARN": Object {
              "Fn::GetAtt": Array [
                "DashboardMasterUserRoleE088A648",
                "Arn",
              ],
            },
          },
        },
        "ClusterConfig": Object {
          "DedicatedMasterCount": 3,
          "DedicatedMasterEnabled": true,
          "DedicatedMasterType": "m6g.large.search",
          "InstanceCount": 3,
          "InstanceType": "r6gd.xlarge.search",
          "ZoneAwarenessConfig": Object {
            "AvailabilityZoneCount": 3,
          },
          "ZoneAwarenessEnabled": true,
        },
        "CognitoOptions": Object {
          "Enabled": false,
        },
        "DomainEndpointOptions": Object {
          "EnforceHTTPS": true,
          "TLSSecurityPolicy": "Policy-Min-TLS-1-0-2019-07",
        },
        "EBSOptions": Object {
          "EBSEnabled": false,
        },
        "EncryptionAtRestOptions": Object {
          "Enabled": true,
        },
        "EngineVersion": "OpenSearch_1.2",
        "LogPublishingOptions": Object {
          "AUDIT_LOGS": Object {
            "CloudWatchLogsLogGroupArn": Object {
              "Fn::GetAtt": Array [
                "DashboardAuditLogsD6A35512",
                "Arn",
              ],
            },
            "Enabled": true,
          },
          "ES_APPLICATION_LOGS": Object {
            "CloudWatchLogsLogGroupArn": Object {
              "Fn::GetAtt": Array [
                "DashboardAppLogs4099E214",
                "Arn",
              ],
            },
            "Enabled": true,
          },
          "INDEX_SLOW_LOGS": Object {
            "CloudWatchLogsLogGroupArn": Object {
              "Fn::GetAtt": Array [
                "DashboardSlowIndexLogs61DDE73B",
                "Arn",
              ],
            },
            "Enabled": true,
          },
          "SEARCH_SLOW_LOGS": Object {
            "CloudWatchLogsLogGroupArn": Object {
              "Fn::GetAtt": Array [
                "DashboardSlowSearchLogsD1D4DEE1",
                "Arn",
              ],
            },
            "Enabled": true,
          },
        },
        "NodeToNodeEncryptionOptions": Object {
          "Enabled": true,
        },
      },
      "Type": "AWS::OpenSearchService::Domain",
      "UpdatePolicy": Object {
        "EnableVersionUpgrade": true,
      },
      "UpdateReplacePolicy": "Retain",
    },
    "DashboardDomainESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611830181CB": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DashboardDomainESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611CustomResourcePolicy49AD4ACE",
      ],
      "Properties": Object {
        "Create": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"CloudWatchLogs\\",\\"action\\":\\"putResourcePolicy\\",\\"parameters\\":{\\"policyName\\":\\"ESLogPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611\\",\\"policyDocument\\":\\"{\\\\\\"Statement\\\\\\":[{\\\\\\"Action\\\\\\":[\\\\\\"logs:PutLogEvents\\\\\\",\\\\\\"logs:CreateLogStream\\\\\\"],\\\\\\"Effect\\\\\\":\\\\\\"Allow\\\\\\",\\\\\\"Principal\\\\\\":{\\\\\\"Service\\\\\\":\\\\\\"es.amazonaws.com\\\\\\"},\\\\\\"Resource\\\\\\":[\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardSlowSearchLogsD1D4DEE1",
                  "Arn",
                ],
              },
              "\\\\\\",\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardSlowIndexLogs61DDE73B",
                  "Arn",
                ],
              },
              "\\\\\\",\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardAppLogs4099E214",
                  "Arn",
                ],
              },
              "\\\\\\",\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardAuditLogsD6A35512",
                  "Arn",
                ],
              },
              "\\\\\\"]}],\\\\\\"Version\\\\\\":\\\\\\"2012-10-17\\\\\\"}\\"},\\"physicalResourceId\\":{\\"id\\":\\"ESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611\\"}}",
            ],
          ],
        },
        "Delete": "{\\"service\\":\\"CloudWatchLogs\\",\\"action\\":\\"deleteResourcePolicy\\",\\"parameters\\":{\\"policyName\\":\\"ESLogPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611\\"},\\"ignoreErrorCodesMatching\\":\\"400\\"}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"CloudWatchLogs\\",\\"action\\":\\"putResourcePolicy\\",\\"parameters\\":{\\"policyName\\":\\"ESLogPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611\\",\\"policyDocument\\":\\"{\\\\\\"Statement\\\\\\":[{\\\\\\"Action\\\\\\":[\\\\\\"logs:PutLogEvents\\\\\\",\\\\\\"logs:CreateLogStream\\\\\\"],\\\\\\"Effect\\\\\\":\\\\\\"Allow\\\\\\",\\\\\\"Principal\\\\\\":{\\\\\\"Service\\\\\\":\\\\\\"es.amazonaws.com\\\\\\"},\\\\\\"Resource\\\\\\":[\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardSlowSearchLogsD1D4DEE1",
                  "Arn",
                ],
              },
              "\\\\\\",\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardSlowIndexLogs61DDE73B",
                  "Arn",
                ],
              },
              "\\\\\\",\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardAppLogs4099E214",
                  "Arn",
                ],
              },
              "\\\\\\",\\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "DashboardAuditLogsD6A35512",
                  "Arn",
                ],
              },
              "\\\\\\"]}],\\\\\\"Version\\\\\\":\\\\\\"2012-10-17\\\\\\"}\\"},\\"physicalResourceId\\":{\\"id\\":\\"ESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611\\"}}",
            ],
          ],
        },
      },
      "Type": "Custom::CloudwatchLogResourcePolicy",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611CustomResourcePolicy49AD4ACE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "logs:PutResourcePolicy",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "logs:DeleteResourcePolicy",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DashboardDomainESLogGroupPolicyc8fa6d20cfff60d0c384a83a18559bc5232144e611CustomResourcePolicy49AD4ACE",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DashboardDomainKuromojiComponentTemplate715A67D0": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "template": Object {
            "settings": Object {
              "index": Object {
                "analysis": Object {
                  "analyzer": Object {
                    "kuromoji_user_dic": Object {
                      "type": "kuromoji",
                    },
                  },
                },
              },
            },
          },
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": "kuromoji_user_dic",
        "path": "_component_template/",
      },
      "Type": "Custom::OpenSearchComponentTemplate",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainOpenSearchResourceFunction6FC3C0C1": Object {
      "DependsOn": Array [
        "DashboardMasterUserRoleDefaultPolicy292966BE",
        "DashboardMasterUserRoleE088A648",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "5a43a2c48e0bd171aaf1c1daa81bcd4fc3e5ecc9293143b4db6a9e304f637ad8.zip",
        },
        "Description": "Lambda-backed custom resources - OpenSearch resources",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DashboardMasterUserRoleE088A648",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DashboardDomainProviderframeworkonEvent09950933": Object {
      "DependsOn": Array [
        "DashboardDomainProviderframeworkonEventServiceRoleDefaultPolicy10CA9520",
        "DashboardDomainProviderframeworkonEventServiceRole84E58F63",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "eaeb69bc290b516fe3b049f89d6118b22249df682fbabf56af300cf345198574.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/Dashboard/Domain/Provider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DashboardDomainOpenSearchResourceFunction6FC3C0C1",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEventServiceRole84E58F63",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DashboardDomainProviderframeworkonEventServiceRole84E58F63": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DashboardDomainProviderframeworkonEventServiceRoleDefaultPolicy10CA9520": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DashboardDomainOpenSearchResourceFunction6FC3C0C1",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DashboardDomainOpenSearchResourceFunction6FC3C0C1",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DashboardDomainProviderframeworkonEventServiceRoleDefaultPolicy10CA9520",
        "Roles": Array [
          Object {
            "Ref": "DashboardDomainProviderframeworkonEventServiceRole84E58F63",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DashboardDomainSnapshotRoleRoleMapping32CD1178": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "backend_roles": Array [
            Object {
              "Fn::GetAtt": Array [
                "DashboardSnapshotRole792BAAA0",
                "Arn",
              ],
            },
          ],
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": "manage_snapshots",
        "path": "_plugins/_security/api/rolesmapping/",
      },
      "Type": "Custom::OpenSearchRoleMapping",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainSocialAnalyticsReadOnlyRoleD23D3D87": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "cluster_permissions": Array [
            "cluster_composite_ops_ro",
            "cluster:admin/opendistro/reports/definition/create",
            "cluster:admin/opendistro/reports/definition/update",
            "cluster:admin/opendistro/reports/definition/on_demand",
            "cluster:admin/opendistro/reports/definition/delete",
            "cluster:admin/opendistro/reports/definition/get",
            "cluster:admin/opendistro/reports/definition/list",
            "cluster:admin/opendistro/reports/instance/list",
            "cluster:admin/opendistro/reports/instance/get",
            "cluster:admin/opendistro/reports/menu/download",
          ],
          "description": "Provide the minimum permissions for all users",
          "index_permissions": Array [
            Object {
              "allowed_actions": Array [
                "read",
                "delete",
                "manage",
                "index",
              ],
              "index_patterns": Array [
                ".kibana",
                ".kibana_*",
                ".opensearch_dashboards",
                ".opensearch_dashboards_*",
              ],
            },
            Object {
              "allowed_actions": Array [
                "indices_all",
              ],
              "index_patterns": Array [
                ".tasks",
                ".management-beats",
              ],
            },
            Object {
              "allowed_actions": Array [
                "read",
                "indices_monitor",
              ],
              "index_patterns": Array [
                "tweets-*",
              ],
            },
          ],
          "tenant_permissions": Array [
            Object {
              "allowed_actions": Array [
                "kibana_all_read",
              ],
              "tenant_patterns": Array [
                "global_tenant",
              ],
            },
          ],
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": "social_analytics_read_only",
        "path": "_plugins/_security/api/roles/",
      },
      "Type": "Custom::OpenSearchRole",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainSocialAnalyticsReadOnlyRoleMappingE72B9FEA": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "backend_roles": Array [
            "*",
          ],
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainSocialAnalyticsReadOnlyRoleD23D3D87",
            "Name",
          ],
        },
        "path": "_plugins/_security/api/rolesmapping/",
      },
      "Type": "Custom::OpenSearchRoleMapping",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardDomainTweetsTemplate35A526B1": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainProviderframeworkonEvent09950933",
            "Arn",
          ],
        },
        "body": Object {
          "composed_of": Array [
            Object {
              "Fn::GetAtt": Array [
                "DashboardDomainKuromojiComponentTemplate715A67D0",
                "Name",
              ],
            },
          ],
          "index_patterns": Array [
            "tweets-*",
          ],
          "template": Object {
            "mappings": Object {
              "_source": Object {
                "enabled": true,
              },
              "properties": Object {
                "author": Object {
                  "properties": Object {
                    "id": Object {
                      "type": "keyword",
                    },
                    "name": Object {
                      "type": "keyword",
                    },
                    "public_metrics": Object {
                      "properties": Object {
                        "followers_count": Object {
                          "type": "long",
                        },
                        "following_count": Object {
                          "type": "long",
                        },
                        "listed_count": Object {
                          "type": "long",
                        },
                        "tweet_count": Object {
                          "type": "long",
                        },
                      },
                    },
                    "url": Object {
                      "index": false,
                      "type": "keyword",
                    },
                    "username": Object {
                      "type": "keyword",
                    },
                    "verified": Object {
                      "type": "boolean",
                    },
                  },
                },
                "author_id": Object {
                  "type": "keyword",
                },
                "comprehend": Object {
                  "properties": Object {
                    "entities": Object {
                      "type": "keyword",
                    },
                    "sentiment": Object {
                      "type": "keyword",
                    },
                    "sentiment_score": Object {
                      "properties": Object {
                        "mixed": Object {
                          "type": "double",
                        },
                        "negative": Object {
                          "type": "double",
                        },
                        "neutral": Object {
                          "type": "double",
                        },
                        "positive": Object {
                          "type": "double",
                        },
                      },
                    },
                  },
                },
                "context_annotations": Object {
                  "properties": Object {
                    "domain": Object {
                      "type": "keyword",
                    },
                    "entity": Object {
                      "type": "keyword",
                    },
                  },
                },
                "conversation_id": Object {
                  "type": "keyword",
                },
                "created_at": Object {
                  "type": "date",
                },
                "created_at_year": Object {
                  "type": "keyword",
                },
                "entities": Object {
                  "properties": Object {
                    "annotation": Object {
                      "type": "keyword",
                    },
                    "cashtag": Object {
                      "type": "keyword",
                    },
                    "hashtag": Object {
                      "type": "keyword",
                    },
                    "mention": Object {
                      "type": "keyword",
                    },
                    "url": Object {
                      "properties": Object {
                        "description": Object {
                          "analyzer": "kuromoji_user_dic",
                          "type": "text",
                        },
                        "display_domain": Object {
                          "type": "keyword",
                        },
                        "display_url": Object {
                          "type": "keyword",
                        },
                        "expanded_url": Object {
                          "fielddata": true,
                          "fields": Object {
                            "raw": Object {
                              "type": "keyword",
                            },
                          },
                          "type": "text",
                        },
                        "title": Object {
                          "analyzer": "kuromoji_user_dic",
                          "fielddata": true,
                          "fields": Object {
                            "raw": Object {
                              "type": "keyword",
                            },
                          },
                          "type": "text",
                        },
                      },
                    },
                  },
                },
                "geo": Object {
                  "properties": Object {
                    "coordinates": Object {
                      "properties": Object {
                        "coordinates": Object {
                          "type": "geo_point",
                        },
                        "type": Object {
                          "type": "keyword",
                        },
                      },
                    },
                    "place_id": Object {
                      "type": "keyword",
                    },
                  },
                },
                "id": Object {
                  "type": "keyword",
                },
                "in_reply_to_user_id": Object {
                  "type": "keyword",
                },
                "lang": Object {
                  "type": "keyword",
                },
                "normalized_text": Object {
                  "analyzer": "kuromoji_user_dic",
                  "type": "text",
                },
                "possibly_sensitive": Object {
                  "type": "boolean",
                },
                "public_metrics": Object {
                  "properties": Object {
                    "like_count": Object {
                      "type": "long",
                    },
                    "quote_count": Object {
                      "type": "long",
                    },
                    "reply_count": Object {
                      "type": "long",
                    },
                    "retweet_count": Object {
                      "type": "long",
                    },
                  },
                },
                "referenced_tweets": Object {
                  "properties": Object {
                    "id": Object {
                      "type": "keyword",
                    },
                    "type": Object {
                      "type": "keyword",
                    },
                  },
                },
                "reply_settings": Object {
                  "type": "keyword",
                },
                "source": Object {
                  "type": "keyword",
                },
                "text": Object {
                  "analyzer": "kuromoji_user_dic",
                  "type": "text",
                },
                "updated_at": Object {
                  "format": "epoch_second",
                  "type": "date",
                },
                "url": Object {
                  "index": false,
                  "type": "keyword",
                },
              },
            },
            "settings": Object {
              "index": Object {
                "number_of_replicas": 1,
                "number_of_shards": 3,
              },
            },
          },
        },
        "host": Object {
          "Fn::GetAtt": Array [
            "DashboardDomainED696CAB",
            "DomainEndpoint",
          ],
        },
        "name": "tweets",
        "path": "_index_template/",
      },
      "Type": "Custom::OpenSearchTemplate",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardMasterUserRoleDefaultPolicy292966BE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "DashboardSnapshotRole792BAAA0",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DashboardMasterUserRoleDefaultPolicy292966BE",
        "Roles": Array [
          Object {
            "Ref": "DashboardMasterUserRoleE088A648",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DashboardMasterUserRoleE088A648": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Master user for OpenSearch / fine-grained access control",
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DashboardSlowIndexLogs61DDE73B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardSlowSearchLogsD1D4DEE1": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "DashboardSnapshotRole792BAAA0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "opensearchservice.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "DashboardSnapshotRoleDefaultPolicyEF231DDD": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:ListBucket",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:s3:::",
                    Object {
                      "Ref": "Bucket83908E77",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:s3:::",
                    Object {
                      "Ref": "Bucket83908E77",
                    },
                    "/opensearch/snapshot/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DashboardSnapshotRoleDefaultPolicyEF231DDD",
        "Roles": Array [
          Object {
            "Ref": "DashboardSnapshotRole792BAAA0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DynamodbLoaderFunction055F4FB2": Object {
      "DependsOn": Array [
        "DynamodbLoaderFunctionServiceRoleDefaultPolicy633EC1F5",
        "DynamodbLoaderFunctionServiceRoleE9182ACC",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e52785f7a0a46053a1a03fe0c73952a54f4b3ff377371a835b0a58b6f3297fbd.zip",
        },
        "Description": "[SocialAnalytics] Process stream records to update DynamoDB",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "DynamodbLoaderFunction",
            "TWEET_TABLE_NAME": Object {
              "Ref": "TweetTable97F090DB",
            },
            "TWITTER_FILTER_CONTEXT_DOMAINS_PARAMETER_NAME": Object {
              "Ref": "twitterFilterContextDomainsAC1EB275",
            },
            "TWITTER_FILTER_SOURCE_LABELS_PARAMETER_NAME": Object {
              "Ref": "twitterFilterSourceLabelsEC9A582C",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:aws:lambda:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":580247275435:layer:LambdaInsightsExtension-Arm64:2",
              ],
            ],
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DynamodbLoaderFunctionServiceRoleE9182ACC",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DynamodbLoaderFunctionKinesisEventSourcetestIngestionStreamB9108F926FD7A04F": Object {
      "Properties": Object {
        "BatchSize": 100,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "IngestionStream56E76A34",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "DynamodbLoaderFunction055F4FB2",
        },
        "MaximumBatchingWindowInSeconds": 10,
        "MaximumRecordAgeInSeconds": 86400,
        "ParallelizationFactor": 3,
        "StartingPosition": "LATEST",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "DynamodbLoaderFunctionServiceRoleDefaultPolicy633EC1F5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ssm:GetParameter",
                "ssm:GetParametersByPath",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/test/Twitter/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kinesis:DescribeStreamSummary",
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:ListShards",
                "kinesis:SubscribeToShard",
                "kinesis:DescribeStream",
                "kinesis:ListStreams",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IngestionStream56E76A34",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "kinesis:DescribeStream",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IngestionStream56E76A34",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "TweetTable97F090DB",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "TweetTable97F090DB",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DynamodbLoaderFunctionServiceRoleDefaultPolicy633EC1F5",
        "Roles": Array [
          Object {
            "Ref": "DynamodbLoaderFunctionServiceRoleE9182ACC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DynamodbLoaderFunctionServiceRoleE9182ACC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "IngestionArchiveStreamA57D2968": Object {
      "Properties": Object {
        "DeliveryStreamType": "KinesisStreamAsSource",
        "ExtendedS3DestinationConfiguration": Object {
          "BucketARN": Object {
            "Fn::GetAtt": Array [
              "Bucket83908E77",
              "Arn",
            ],
          },
          "BufferingHints": Object {
            "IntervalInSeconds": 900,
            "SizeInMBs": 128,
          },
          "CloudWatchLoggingOptions": Object {
            "Enabled": true,
            "LogGroupName": Object {
              "Ref": "IngestionArchiveStreamLogGroupCB5B1CC7",
            },
            "LogStreamName": "ErrorLogs",
          },
          "CompressionFormat": "GZIP",
          "DynamicPartitioningConfiguration": Object {
            "Enabled": true,
          },
          "ErrorOutputPrefix": "raw/tweets/v2-error/!{firehose:error-output-type}/",
          "Prefix": "raw/tweets/v2/year=!{partitionKeyFromQuery:year}/month=!{partitionKeyFromQuery:month}/day=!{partitionKeyFromQuery:day}/",
          "ProcessingConfiguration": Object {
            "Enabled": true,
            "Processors": Array [
              Object {
                "Parameters": Array [
                  Object {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": Object {
                      "Fn::GetAtt": Array [
                        "ArchiveFilterFunction81E5C2D0",
                        "Arn",
                      ],
                    },
                  },
                ],
                "Type": "Lambda",
              },
              Object {
                "Parameters": Array [
                  Object {
                    "ParameterName": "MetadataExtractionQuery",
                    "ParameterValue": "{                    year : .data.created_at | split(\\".\\")[0] | strptime(\\"%Y-%m-%dT%H:%M:%S\\") | strftime(\\"%Y\\"),                    month : .data.created_at | split(\\".\\")[0] | strptime(\\"%Y-%m-%dT%H:%M:%S\\") | strftime(\\"%m\\"),                    day : .data.created_at | split(\\".\\")[0] | strptime(\\"%Y-%m-%dT%H:%M:%S\\") | strftime(\\"%d\\")                  }",
                  },
                  Object {
                    "ParameterName": "JsonParsingEngine",
                    "ParameterValue": "JQ-1.6",
                  },
                ],
                "Type": "MetadataExtraction",
              },
              Object {
                "Parameters": Array [
                  Object {
                    "ParameterName": "Delimiter",
                    "ParameterValue": "\\\\n",
                  },
                ],
                "Type": "AppendDelimiterToRecord",
              },
            ],
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "IngestionArchiveStreamRoleE73E0AA1",
              "Arn",
            ],
          },
        },
        "KinesisStreamSourceConfiguration": Object {
          "KinesisStreamARN": Object {
            "Fn::GetAtt": Array [
              "IngestionStream56E76A34",
              "Arn",
            ],
          },
          "RoleARN": Object {
            "Fn::GetAtt": Array [
              "IngestionArchiveStreamRoleE73E0AA1",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "IngestionArchiveStreamLogGroupCB5B1CC7": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 14,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "IngestionArchiveStreamRoleE73E0AA1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "kinesis:DescribeStreamSummary",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:ListShards",
                    "kinesis:SubscribeToShard",
                    "kinesis:DescribeStream",
                    "kinesis:ListStreams",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "IngestionStream56E76A34",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SourcePolicy",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "s3:GetObject*",
                    "s3:GetBucket*",
                    "s3:List*",
                    "s3:DeleteObject*",
                    "s3:PutObject",
                    "s3:Abort*",
                  ],
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "Bucket83908E77",
                        "Arn",
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          Object {
                            "Fn::GetAtt": Array [
                              "Bucket83908E77",
                              "Arn",
                            ],
                          },
                          "/raw/tweets/v2/*",
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          Object {
                            "Fn::GetAtt": Array [
                              "Bucket83908E77",
                              "Arn",
                            ],
                          },
                          "/raw/tweets/v2-error/*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "DestinationPolicy",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        Object {
                          "Fn::GetAtt": Array [
                            "IngestionArchiveStreamLogGroupCB5B1CC7",
                            "Arn",
                          ],
                        },
                        ":ErrorLogs",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LoggingPolicy",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "ArchiveFilterFunction81E5C2D0",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "ProcessorPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "IngestionStream56E76A34": Object {
      "Properties": Object {
        "RetentionPeriodHours": 24,
        "ShardCount": 1,
        "StreamEncryption": Object {
          "EncryptionType": "KMS",
          "KeyId": "alias/aws/kinesis",
        },
        "StreamModeDetails": Object {
          "StreamMode": "PROVISIONED",
        },
      },
      "Type": "AWS::Kinesis::Stream",
    },
    "OpenSearchLoaderFunction713423B0": Object {
      "DependsOn": Array [
        "OpenSearchLoaderFunctionServiceRoleDefaultPolicyE6EF7929",
        "OpenSearchLoaderFunctionServiceRole32276686",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "bd8deb68182296d3eda614bc59c6ad880d3b01d50958d9fa93a0c37047986bbd.zip",
        },
        "Description": "[SocialAnalytics] OpenSearch Bulk Loader",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "OPENSEARCH_DOMAIN_ENDPOINT": Object {
              "Fn::GetAtt": Array [
                "DashboardDomainED696CAB",
                "DomainEndpoint",
              ],
            },
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "OpenSearchLoaderFunction",
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:aws:lambda:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":580247275435:layer:LambdaInsightsExtension-Arm64:2",
              ],
            ],
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "OpenSearchLoaderFunctionServiceRole32276686",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "OpenSearchLoaderFunctionDynamoDBEventSourcetestTweetTable04D57799E7FA3624": Object {
      "Properties": Object {
        "BatchSize": 100,
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "TweetTable97F090DB",
            "StreamArn",
          ],
        },
        "FunctionName": Object {
          "Ref": "OpenSearchLoaderFunction713423B0",
        },
        "MaximumBatchingWindowInSeconds": 10,
        "MaximumRecordAgeInSeconds": 86400,
        "StartingPosition": "LATEST",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "OpenSearchLoaderFunctionServiceRole32276686": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OpenSearchLoaderFunctionServiceRoleDefaultPolicyE6EF7929": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "dynamodb:ListStreams",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TweetTable97F090DB",
                  "StreamArn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OpenSearchLoaderFunctionServiceRoleDefaultPolicyE6EF7929",
        "Roles": Array [
          Object {
            "Ref": "OpenSearchLoaderFunctionServiceRole32276686",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OpenSearchPackagesDeploymentAwsCliLayerADF8F738": Object {
      "Properties": Object {
        "Content": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "02927fd0ce5bb130cbc8d11f17469e74496526efe5186a9ab36e8a8138e9a557.zip",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "OpenSearchPackagesDeploymentCustomResource4C6D16B3": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DestinationBucketKeyPrefix": "opensearch/packages/",
        "DestinationBucketName": Object {
          "Ref": "Bucket83908E77",
        },
        "Prune": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": Array [
          Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceObjectKeys": Array [
          "84dee23cdc779098a9b1b4db90506e493154570f712c115474e24da8b2a6e965.zip",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "OpenSearchPackagesRegisterFunction7CDCEE20": Object {
      "DependsOn": Array [
        "OpenSearchPackagesRegisterFunctionServiceRoleDefaultPolicy3DE31E27",
        "OpenSearchPackagesRegisterFunctionServiceRoleB0065A50",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "159767368f4b46b295468fbc456e65189d9a9ed9873b95d1db5564d2adaca85b.zip",
        },
        "Description": "[SocialAnalytics] OpenSearch package register",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "OpenSearchPackagesRegisterFunctionServiceRoleB0065A50",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "OpenSearchPackagesRegisterFunctionServiceRoleB0065A50": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OpenSearchPackagesRegisterFunctionServiceRoleDefaultPolicy3DE31E27": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "es:CreatePackage",
                "es:DescribePackages",
                "es:UpdatePackage",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "Bucket83908E77",
                        "Arn",
                      ],
                    },
                    "/opensearch/packages/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OpenSearchPackagesRegisterFunctionServiceRoleDefaultPolicy3DE31E27",
        "Roles": Array [
          Object {
            "Ref": "OpenSearchPackagesRegisterFunctionServiceRoleB0065A50",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ReingestTweetsV1Function1B873B33": Object {
      "DependsOn": Array [
        "ReingestTweetsV1FunctionServiceRoleDefaultPolicy49220E3B",
        "ReingestTweetsV1FunctionServiceRole50A964C4",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e228dcd60fb25e6ccc0e88542da5c9913885d82a034be3abb2ceca4dec8a2893.zip",
        },
        "Description": "Re-ingest for TweetsV1",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DEST_STREAM_NAME": Object {
              "Ref": "IngestionStream56E76A34",
            },
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "ReingestTweetsV1Function",
            "POWERTOOLS_TRACER_CAPTURE_RESPONSE": "false",
            "TWITTER_PARAMETER_PATH": "/test/Twitter",
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:aws:lambda:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":580247275435:layer:LambdaInsightsExtension-Arm64:2",
              ],
            ],
          },
        ],
        "MemorySize": 512,
        "ReservedConcurrentExecutions": 1,
        "Role": Object {
          "Fn::GetAtt": Array [
            "ReingestTweetsV1FunctionServiceRole50A964C4",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 300,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ReingestTweetsV1FunctionQueueBCFE63A8": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "MessageRetentionPeriod": 1209600,
        "VisibilityTimeout": 300,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "ReingestTweetsV1FunctionQueuePolicyF98579A3": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:SourceArn": Object {
                    "Fn::GetAtt": Array [
                      "Bucket83908E77",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "s3.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ReingestTweetsV1FunctionQueueBCFE63A8",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "ReingestTweetsV1FunctionQueueBCFE63A8",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "ReingestTweetsV1FunctionServiceRole50A964C4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ReingestTweetsV1FunctionServiceRoleDefaultPolicy49220E3B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ssm:GetParameter",
                "ssm:GetParametersByPath",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/test/Twitter/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ReingestTweetsV1FunctionQueueBCFE63A8",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/reingest/tweets/v1/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:DeleteObject*",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "Bucket83908E77",
                        "Arn",
                      ],
                    },
                    "/reingest/tweets/v1/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kinesis:ListShards",
                "kinesis:PutRecord",
                "kinesis:PutRecords",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IngestionStream56E76A34",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ReingestTweetsV1FunctionServiceRoleDefaultPolicy49220E3B",
        "Roles": Array [
          Object {
            "Ref": "ReingestTweetsV1FunctionServiceRole50A964C4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ReingestTweetsV1FunctionSqsEventSourcetestReingestTweetsV1FunctionQueueD3DCCF5A88C0BE36": Object {
      "Properties": Object {
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "ReingestTweetsV1FunctionQueueBCFE63A8",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "ReingestTweetsV1Function1B873B33",
        },
        "MaximumBatchingWindowInSeconds": 10,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "ReingestTweetsV2Function867ADFC1": Object {
      "DependsOn": Array [
        "ReingestTweetsV2FunctionServiceRoleDefaultPolicy200AEA52",
        "ReingestTweetsV2FunctionServiceRole9AB93EDA",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "d5d436b01c5ecc41912e3048c6bf50fbb58a578358d7b3b1b349440b2c2c4c72.zip",
        },
        "Description": "Re-ingest for TweetsV2",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DEST_STREAM_NAME": Object {
              "Ref": "IngestionStream56E76A34",
            },
            "POWERTOOLS_METRICS_NAMESPACE": Object {
              "Ref": "AWS::StackName",
            },
            "POWERTOOLS_SERVICE_NAME": "ReingestTweetsV2Function",
            "POWERTOOLS_TRACER_CAPTURE_RESPONSE": "false",
          },
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:aws:lambda:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":580247275435:layer:LambdaInsightsExtension-Arm64:2",
              ],
            ],
          },
        ],
        "MemorySize": 1536,
        "ReservedConcurrentExecutions": 1,
        "Role": Object {
          "Fn::GetAtt": Array [
            "ReingestTweetsV2FunctionServiceRole9AB93EDA",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 900,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ReingestTweetsV2FunctionQueue00EE7A69": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "MessageRetentionPeriod": 1209600,
        "VisibilityTimeout": 900,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "ReingestTweetsV2FunctionQueuePolicy0BCB3395": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:SourceArn": Object {
                    "Fn::GetAtt": Array [
                      "Bucket83908E77",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "s3.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ReingestTweetsV2FunctionQueue00EE7A69",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Queues": Array [
          Object {
            "Ref": "ReingestTweetsV2FunctionQueue00EE7A69",
          },
        ],
      },
      "Type": "AWS::SQS::QueuePolicy",
    },
    "ReingestTweetsV2FunctionServiceRole9AB93EDA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ReingestTweetsV2FunctionServiceRoleDefaultPolicy200AEA52": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ssm:GetParameter",
                "ssm:GetParametersByPath",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/test/Twitter/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ReingestTweetsV2FunctionQueue00EE7A69",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/reingest/tweets/v2/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:DeleteObject*",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "Bucket83908E77",
                        "Arn",
                      ],
                    },
                    "/reingest/tweets/v2/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kinesis:ListShards",
                "kinesis:PutRecord",
                "kinesis:PutRecords",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IngestionStream56E76A34",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ReingestTweetsV2FunctionServiceRoleDefaultPolicy200AEA52",
        "Roles": Array [
          Object {
            "Ref": "ReingestTweetsV2FunctionServiceRole9AB93EDA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ReingestTweetsV2FunctionSqsEventSourcetestReingestTweetsV2FunctionQueue0E22A1A877154228": Object {
      "Properties": Object {
        "EventSourceArn": Object {
          "Fn::GetAtt": Array [
            "ReingestTweetsV2FunctionQueue00EE7A69",
            "Arn",
          ],
        },
        "FunctionName": Object {
          "Ref": "ReingestTweetsV2Function867ADFC1",
        },
        "MaximumBatchingWindowInSeconds": 10,
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "TweetTable97F090DB": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "created_at_year",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "created_at",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": Array [
          Object {
            "IndexName": "created_at-index",
            "KeySchema": Array [
              Object {
                "AttributeName": "created_at_year",
                "KeyType": "HASH",
              },
              Object {
                "AttributeName": "created_at",
                "KeyType": "RANGE",
              },
            ],
            "Projection": Object {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "StreamSpecification": Object {
          "StreamViewType": "NEW_IMAGE",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "TwitterBearerTokenCBE899A9": Object {
      "Properties": Object {
        "Description": "Twitter Bearer Token",
        "Name": "/test/Twitter/BearerToken",
        "Type": "String",
        "Value": Object {
          "Ref": "TwitterBearerTokenParameter",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "TwitterFieldsParamsDD9504EE": Object {
      "Properties": Object {
        "Description": "Tweet fields params for API calls",
        "Name": "/test/Twitter/FieldsParams",
        "Type": "String",
        "Value": "{\\"tweet.fields\\":[\\"id\\",\\"text\\",\\"author_id\\",\\"context_annotations\\",\\"conversation_id\\",\\"created_at\\",\\"entities\\",\\"geo\\",\\"in_reply_to_user_id\\",\\"lang\\",\\"possibly_sensitive\\",\\"public_metrics\\",\\"referenced_tweets\\",\\"reply_settings\\",\\"source\\"],\\"user.fields\\":[\\"id\\",\\"name\\",\\"username\\",\\"url\\",\\"verified\\",\\"public_metrics\\"],\\"place.fields\\":[\\"id\\",\\"full_name\\",\\"contained_within\\",\\"country\\",\\"country_code\\",\\"geo\\",\\"name\\",\\"place_type\\"],\\"expansions\\":[\\"author_id\\",\\"entities.mentions.username\\",\\"in_reply_to_user_id\\",\\"referenced_tweets.id\\",\\"referenced_tweets.id.author_id\\"]}",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "TwitterStreamingReaderCluster31726261": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "TwitterStreamingReaderLogGroupFAD6413F": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 14,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "TwitterStreamingReaderServiceE64B9C32": Object {
      "Properties": Object {
        "Cluster": Object {
          "Ref": "TwitterStreamingReaderCluster31726261",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 100,
          "MinimumHealthyPercent": 0,
        },
        "EnableECSManagedTags": false,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "TwitterStreamingReaderServiceSecurityGroupCF0E5D6B",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPublicSubnet1SubnetB4246D30",
              },
              Object {
                "Ref": "VPCPublicSubnet2Subnet74179F39",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "TwitterStreamingReaderTaskDefinitionCB2925BF",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "TwitterStreamingReaderServiceSecurityGroupCF0E5D6B": Object {
      "Properties": Object {
        "GroupDescription": "test/TwitterStreamingReader/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "TwitterStreamingReaderServiceSecurityGroupfromtestContainerInsightsServiceSecurityGroup9100777E2020A5654386": Object {
      "Properties": Object {
        "Description": "Fluent-Bit Prometheus Metrics",
        "FromPort": 2020,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "TwitterStreamingReaderServiceSecurityGroupCF0E5D6B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ContainerInsightsServiceSecurityGroup8DE88CE7",
            "GroupId",
          ],
        },
        "ToPort": 2020,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "TwitterStreamingReaderTaskDefinitionCB2925BF": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 128,
            "DependsOn": Array [
              Object {
                "Condition": "START",
                "ContainerName": "log-router",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "LOGGER_TYPE",
                "Value": "fluent",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:8b652b702b188ea23493c4c65d651a163958f4bc9c8af00be5886e5b57bbe11e",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "TwitterStreamingReaderLogGroupFAD6413F",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "app",
              },
            },
            "MemoryReservation": 256,
            "Name": "app",
            "ReadonlyRootFilesystem": true,
            "Secrets": Array [
              Object {
                "Name": "TWITTER_BEARER_TOKEN",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterBearerTokenCBE899A9",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "TWITTER_FIELDS_PARAMS",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterFieldsParamsDD9504EE",
                      },
                    ],
                  ],
                },
              },
            ],
          },
          Object {
            "Cpu": 64,
            "Environment": Array [
              Object {
                "Name": "LOG_GROUP_NAME",
                "Value": Object {
                  "Ref": "TwitterStreamingReaderLogGroupFAD6413F",
                },
              },
              Object {
                "Name": "OUTPUT_PLUGIN_NAME",
                "Value": "kinesis_streams",
              },
              Object {
                "Name": "OUTPUT_STREAM_NAME",
                "Value": Object {
                  "Ref": "IngestionStream56E76A34",
                },
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "echo",
                "'{\\"health\\": \\"check\\"}'",
                "|",
                "nc",
                "127.0.0.1",
                "8877",
                "||",
                "exit",
                "1",
              ],
              "Interval": 30,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": Object {
              "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:e377174b428ec056ee86c68035bcff03f5a75c10ef6513089fb1eb42611222a4",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "TwitterStreamingReaderLogGroupFAD6413F",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "log-router",
              },
            },
            "MemoryReservation": 128,
            "Name": "log-router",
            "PortMappings": Array [
              Object {
                "ContainerPort": 2020,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "TwitterStreamingReaderTaskDefinitionExecutionRole20182CE0",
            "Arn",
          ],
        },
        "Family": "testTwitterStreamingReaderTaskDefinitionF4210DB8",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "TwitterStreamingReaderTaskDefinitionTaskRoleDEBCAADA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "TwitterStreamingReaderTaskDefinitionExecutionRole20182CE0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TwitterStreamingReaderTaskDefinitionExecutionRoleDefaultPolicy1C400A2A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/",
                    Object {
                      "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TwitterStreamingReaderLogGroupFAD6413F",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterBearerTokenCBE899A9",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterFieldsParamsDD9504EE",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TwitterStreamingReaderTaskDefinitionExecutionRoleDefaultPolicy1C400A2A",
        "Roles": Array [
          Object {
            "Ref": "TwitterStreamingReaderTaskDefinitionExecutionRole20182CE0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TwitterStreamingReaderTaskDefinitionTaskRoleDEBCAADA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TwitterStreamingReaderTaskDefinitionTaskRoleDefaultPolicy1842AE3B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "TwitterStreamingReaderLogGroupFAD6413F",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "kinesis:ListShards",
                "kinesis:PutRecord",
                "kinesis:PutRecords",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IngestionStream56E76A34",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TwitterStreamingReaderTaskDefinitionTaskRoleDefaultPolicy1842AE3B",
        "Roles": Array [
          Object {
            "Ref": "TwitterStreamingReaderTaskDefinitionTaskRoleDEBCAADA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VPCB9E5F0B4": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet1EIP6AD938E8": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet1NATGatewayE0556630": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet1RouteTableFEE4B781": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet1SubnetB4246D30": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet2Subnet74179F39": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCVPCGW99B986DC": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "twitterFilterContextDomainsAC1EB275": Object {
      "Properties": Object {
        "Description": "Context domains for filtering",
        "Name": "/test/Twitter/Filter/ContextDomains",
        "Type": "StringList",
        "Value": "Musician,Music Genre,Actor,TV Shows,Multimedia Franchise,Fictional Character,Entertainment Personality",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "twitterFilterSourceLabelsEC9A582C": Object {
      "Properties": Object {
        "Description": "Tweet source labels for filtering",
        "Name": "/test/Twitter/Filter/SourceLabels",
        "Type": "StringList",
        "Value": "Twitter for Advertisers,twittbot.net,Mk00JapanBot,Gakeppu Tweet,BelugaCampaignSEA,rare_zaiko,Wn32ShimaneBot,uhiiman_bot,atulsbots",
      },
      "Type": "AWS::SSM::Parameter",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
