AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Social Media Dashboard Main Stack'
Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-social-media-dashboard
    Description: "Serverless Social Media Dashboard"
    Author: Kazuki Matsuda
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['serverless', 'fargate', 'lambda', 'kinesis', 'elasticsearch', 'twitter']
    HomePageUrl: https://github.com/mats16/serverless-social-media-dashboard
    SemanticVersion: 0.0.4
    SourceCodeUrl: https://github.com/mats16/serverless-social-media-dashboard

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Twitter API Parameters
        Parameters:
          - TwitterTermList
          - TwitterLanguages
          - TwitterFilterLevel
      - Label:
          default: Twitter API Credentials
        Parameters:
          - TwitterConsumerKey
          - TwitterConsumerSecret
          - TwitterAccessToken
          - TwitterAccessTokenSecret
      - Label:
          default: Application Parameters
        Parameters:
          - ComprehendEntityScoreThreshold
          - SignupAllowedDomains
          - LabelingJobEnabled
      - Label:
          default: Elasticsearch Configuration
        Parameters:
          - ElasticsearchVersion
          - ElasticsearchAvailabilityZoneCount
          - ElasticsearchDataNodeInstanceType
          - ElasticsearchDataNodeInstanceCount
          - ElasticsearchMasterNodeInstanceType
          - ElasticsearchMasterNodeInstanceCount
          - ElasticsearchAdvancedSecurityEnabled
      - Label:
          default: Build Configuration
        Parameters:
          - DockerHubUsername
          - DockerHubAccessToken
      - Label:
          default: Notification Configuration
        Parameters:
          - SlackWorkspaceId
          - SlackChannelId

Parameters:

  TwitterTermList:
    Description: List of terms at calling twitter API and filtering on analytics lambda
    Type: CommaDelimitedList
    Default: "AWS,EC2,RDS,S3"

  TwitterLanguages:
    Description: List of languages to use for the twitter streaming reader
    Type: CommaDelimitedList
    Default: "en,es,fr,de,it,pt,ar,hi,ja,ko,zh"

  TwitterFilterLevel:
    Description: https://developer.twitter.com/en/docs/tweets/filter-realtime/api-reference/post-statuses-filter
    Type: String
    Default: none
    AllowedValues:
      - none
      - low
      - medium

  TwitterConsumerKey:
    Description: Consumer key for access twitter
    Type: String
  TwitterConsumerSecret:
    Description: Consumer Secret for access twitter
    Type: String
    NoEcho: True
  TwitterAccessToken:
    Description: Access Token for calling twitter
    Type: String
  TwitterAccessTokenSecret:
    Description: Access Token Secret for calling twitter
    Type: String
    NoEcho: True

  DockerHubUsername:
    Description: DockerHub username used in CodeBuild
    Type: String
    Default: ''
  DockerHubAccessToken:
    Description: DockerHub access token used in CodeBuild
    Type: String
    Default: ''
    NoEcho: True

  ComprehendEntityScoreThreshold:
    Type: Number
    Default: 0.8
    MaxValue: 1
    MinValue: 0

  SignupAllowedDomains:
    Type: CommaDelimitedList
    Description: Specific domains allowed to register on Cognito User Pool
    Default: amazon.com,amazon.co.jp

  ElasticsearchVersion:
    Type: String
    Default: 7.8

  ElasticsearchAvailabilityZoneCount:
    Type: Number
    Default: 2
    AllowedValues:
      - 1
      - 2
      - 3

  ElasticsearchDataNodeInstanceType:
    Type: String
    Default: i3.large.elasticsearch
    AllowedPattern: ^[a-z1-9]+\.[a-z1-9]+\.elasticsearch$

  ElasticsearchDataNodeInstanceCount:
    Type: Number
    Default: 2

  ElasticsearchMasterNodeInstanceType:
    Type: String
    Default: t3.medium.elasticsearch
    AllowedPattern: ^[a-z1-9]+\.[a-z1-9]+\.elasticsearch$

  ElasticsearchMasterNodeInstanceCount:
    Type: Number
    Default: 3
    AllowedValues: [ 3, 5 ]

  ElasticsearchAdvancedSecurityEnabled:
    Description: Fine-Grained Access Control
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  LabelingJobEnabled:
    Description: Enable labeling job for machine-learning
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  SlackWorkspaceId:
    Type: String
    Default: 'disabled'

  SlackChannelId:
    Type: String
    Default: 'disabled'

Conditions:
  LabelingJobEnabled: !Equals [ !Ref LabelingJobEnabled, 'true' ]
  SlackEnabled: !And
    - !Not [!Equals [!Ref SlackWorkspaceId, 'disabled']]
    - !Not [!Equals [!Ref SlackChannelId, 'disabled']]

Globals:
  Function:
    Runtime: python3.8
    Handler: index.lambda_handler
    Layers:
      - !Ref PowertoolsLayer

Resources:
  # ParameterStore & SecretsManager --------------------------------------
  TwitterTopicsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/Topics'
      Description: A comma-separated list of phrases which will be used to determine what Tweets will be delivered on the stream.
      Type: StringList
      Value: !Join [ ',', !Ref TwitterTermList ]

  TwitterLanguagesParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/Languages'
      Type: StringList
      Value: !Join [ ',', !Ref TwitterLanguages ]

  TwitterFilterLevelParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/Twitter/FilterLevel'
      Type: String
      Value: !Ref TwitterFilterLevel

  TwitterCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/TwitterCredentials'
      SecretString: !Sub |
        {
          "consumer_key": "${TwitterConsumerKey}",
          "consumer_secret": "${TwitterConsumerSecret}",
          "access_token": "${TwitterAccessToken}",
          "access_token_secret": "${TwitterAccessTokenSecret}"
        }

  DockerHubCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/DockerHubCredentials'
      SecretString: !Sub |
        {
          "username": "${DockerHubUsername}",
          "password": "${DockerHubAccessToken}"
        }

  # Authentication --------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true

  PreSignupTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'PreSignup Lambda Trigger for Cognito User Pool'
      CodeUri: functions/pre_signup_trigger/
      Environment:
        Variables:
          ALLOWED_DOMAINS: !Join [',', !Ref SignupAllowedDomains]
      Events:
        CognitoUserPoolPreSignup:
          Type: Cognito
          Properties:
            Trigger: PreSignUp
            UserPool: !Ref UserPool

  PostConfirmationTriggerFunction:
    Type: AWS::Serverless::Function
    Condition: LabelingJobEnabled
    Properties:
      Description: 'PostConfirmation Lambda Trigger for Cognito User Pool'
      CodeUri: functions/post_confirmation_trigger/
      Environment:
        Variables:
          GROUP_NAME: GroundTruthWorkforce
      Events:
        CognitoUserPoolPostConfirmation:
          Type: Cognito
          Properties:
            Trigger: PostConfirmation
            UserPool: !Ref UserPool
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: cognito-idp:AdminAddUserToGroup
              Resource: '*'

  # Notification --------------------------------------
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: Topic for Alarm

  ChatbotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: chatbot.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  ChatBot:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Condition: SlackEnabled
    Properties: 
      ConfigurationName: default-notification
      LoggingLevel: INFO
      SlackWorkspaceId: !Ref SlackWorkspaceId
      SlackChannelId: !Ref SlackChannelId
      IamRoleArn: !GetAtt ChatbotRole.Arn
      SnsTopicArns: 
        - !Ref AlarmTopic
        - !GetAtt ContainerRepoStack.Outputs.Topic
        - !GetAtt ElasticsearchStack.Outputs.Topic
        - !GetAtt DataLakeStack.Outputs.Topic
        - !If [ LabelingJobEnabled, !GetAtt LabelingStack.Outputs.Topic, !Ref AWS::NoValue ]

  # Application Main --------------------------------------
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  TweetStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  TweetStreamForBatch:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  AnalyzedTweetStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  IndexingStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption: 
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  AnalyticsFunctionForBatch:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Social Media Dashboard] Analytics Function for Batch'
      CodeUri: functions/analytics/
      MemorySize: 256
      Timeout: 300
      Tracing: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:10"
      Environment:
        Variables:
          LOG_LEVEL: INFO
          POWERTOOLS_METRICS_NAMESPACE: Lambda/Custom
          POWERTOOLS_SERVICE_NAME: AnalyticsFunctionForBatch
          TWEET_DAY_THRESHOLD: 730
          TWITTER_TOPICS: !GetAtt TwitterTopicsParameter.Value
          TWITTER_LANGS: !GetAtt TwitterLanguagesParameter.Value
          COMPREHEND_ENTITY_SCORE_THRESHOLD: !Ref ComprehendEntityScoreThreshold
          INDEXING_STREAM: !Ref IndexingStream
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TweetStreamForBatch.Arn
            StartingPosition: LATEST
            ParallelizationFactor: 10
            BatchSize: 200
            MaximumBatchingWindowInSeconds: 15
            MaximumRecordAgeInSeconds: 259200  # 3day
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: "2012-10-17"
          Statement:
            - Sid: ComprehendAccess
              Effect: Allow
              Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment', 'comprehend:DetectKeyPhrases']
              Resource: '*'
            - Sid: TranslateAccess
              Effect: Allow
              Action: ['translate:TranslateText']
              Resource: '*'
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource: !GetAtt IndexingStream.Arn

  AnalyticsFunctionForBatchErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Errors of Analytics Function for Batch
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions: 
        - Name: FunctionName
          Value: !Ref AnalyticsFunctionForBatch
      Statistic: Sum
      Period: 60
      AlarmActions: 
        - !Ref AlarmTopic
      OKActions: 
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      TreatMissingData: notBreaching

  AnalyzingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Social Media Dashboard] Analyzing Function'
      CodeUri: functions/analyzing/
      MemorySize: 256
      Timeout: 300
      Tracing: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:10"
      Environment:
        Variables:
          LOG_LEVEL: INFO
          POWERTOOLS_METRICS_NAMESPACE: Lambda/Custom
          POWERTOOLS_SERVICE_NAME: AnalyzingFunction
          TWEET_DAY_THRESHOLD: 180
          DST_STREAM: !Ref AnalyzedTweetStream
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TweetStream.Arn
            StartingPosition: LATEST
            ParallelizationFactor: 1
            BatchSize: 200
            MaximumBatchingWindowInSeconds: 15
            MaximumRecordAgeInSeconds: 86400  # 1day
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: "2012-10-17"
          Statement:
            - Sid: ComprehendAndTranslate
              Effect: Allow
              Action:
                - 'comprehend:DetectEntities'
                - 'comprehend:DetectSentiment'
                - 'comprehend:DetectKeyPhrases'
                - 'translate:TranslateText'
              Resource: '*'
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource: !GetAtt AnalyzedTweetStream.Arn
  AnalyzingFunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Errors of Analyzing Function
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions: 
        - Name: FunctionName
          Value: !Ref AnalyzingFunction
      Statistic: Sum
      Period: 60
      AlarmActions: 
        - !Ref AlarmTopic
      OKActions: 
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      TreatMissingData: notBreaching

  TransformingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Social Media Dashboard] Transforming Function'
      CodeUri: functions/transforming/
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:10"
      Environment:
        Variables:
          LOG_LEVEL: INFO
          POWERTOOLS_METRICS_NAMESPACE: Lambda/Custom
          POWERTOOLS_SERVICE_NAME: TransformingFunction
          TWEET_DAY_THRESHOLD: 180
          #TWITTER_TOPICS: !GetAtt TwitterTopicsParameter.Value
          TWITTER_LANGS: !GetAtt TwitterLanguagesParameter.Value
          COMPREHEND_ENTITY_SCORE_THRESHOLD: !Ref ComprehendEntityScoreThreshold
          DST_STREAM: !Ref IndexingStream
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AnalyzedTweetStream.Arn
            StartingPosition: LATEST
            ParallelizationFactor: 1
            BatchSize: 200
            MaximumBatchingWindowInSeconds: 5
            MaximumRecordAgeInSeconds: 86400  # 1day
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: "2012-10-17"
          Statement:
            - Sid: KinesisAccess
              Effect: Allow
              Action:
                - 'kinesis:PutRecord'
                - 'kinesis:PutRecords'
              Resource: !GetAtt IndexingStream.Arn
  TransformingFunctionErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Errors of Transforming Function
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions: 
        - Name: FunctionName
          Value: !Ref TransformingFunction
      Statistic: Sum
      Period: 60
      AlarmActions: 
        - !Ref AlarmTopic
      OKActions: 
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 3
      EvaluationPeriods: 5
      TreatMissingData: notBreaching

#  TweetEventBus:
#    Type: AWS::Events::EventBus
#    Properties: 
#      Name: !Ref AWS::StackName
#
#  PuEventFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Description: 'PutEvent function  - KinesisStream to EventBridge'
#      CodeUri: source/put_events_function/
#      Handler: index.lambda_handler
#      Runtime: python3.7
#      MemorySize: 128
#      Timeout: 10
#      Tracing: Active
#      Environment:
#        Variables:
#          EventBusName: !Ref TweetEventBus
#      Events:
#        Stream:
#          Type: Kinesis
#          Properties:
#            Stream: !GetAtt IndexingStream.Arn
#            BatchSize: 10
#            StartingPosition: LATEST
#      Policies:
#        - Version: "2012-10-17"
#          Statement:
#            - Sid: PutEvents
#              Effect: Allow
#              Action:
#                - events:PutEvents
#              Resource:
#                - !GetAtt TweetEventBus.Arn

  # Nested Stacks --------------------------------------
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/vpc/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName

  TwitterProducerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/twitter_producer/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        VpcId: !GetAtt VpcStack.Outputs.VpcId
        PublicSubnetList: !GetAtt VpcStack.Outputs.PublicSubnetList
        TweetStreamName: !Ref TweetStream
        TwitterTopicsParameter: !Ref TwitterTopicsParameter
        TwitterLanguagesParameter: !Ref TwitterLanguagesParameter
        TwitterFilterLevelParameter: !Ref TwitterFilterLevelParameter
        TwitterCredentials: !Ref TwitterCredentials

  ContainerRepoStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/container_repo/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        S3ObjectsFunctionArn: !GetAtt S3ObjectsFunction.Arn
        DockerHubCredentials: !Ref DockerHubCredentials

  ElasticsearchStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/elasticsearch/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        IndexingStreamArn: !GetAtt IndexingStream.Arn
        UserPool: !Ref UserPool
        PowertoolsLayer: !Ref PowertoolsLayer
        CustomResourceHelperLayer: !Ref CustomResourceHelperLayer
        ElasticsearchClientLayer: !Ref ElasticsearchClientLayer
        ElasticsearchVersion: !Ref ElasticsearchVersion
        ElasticsearchAvailabilityZoneCount: !Ref ElasticsearchAvailabilityZoneCount
        ElasticsearchDataNodeInstanceType: !Ref ElasticsearchDataNodeInstanceType
        ElasticsearchDataNodeInstanceCount: !Ref ElasticsearchDataNodeInstanceCount
        ElasticsearchMasterNodeInstanceType: !Ref ElasticsearchMasterNodeInstanceType
        ElasticsearchMasterNodeInstanceCount: !Ref ElasticsearchMasterNodeInstanceCount
        ElasticsearchAdvancedSecurityEnabled: !Ref ElasticsearchAdvancedSecurityEnabled

  DataLakeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: nested_stacks/datalake/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        Bucket: !Ref Bucket
        TweetStreamArn: !GetAtt TweetStream.Arn

  LabelingStack:
    Type: AWS::CloudFormation::Stack
    Condition: LabelingJobEnabled
    Properties:
      TemplateURL: nested_stacks/labeling_job/template.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        TweetStreamArn: !GetAtt TweetStream.Arn
        UserPoolId: !Ref UserPool
        Bucket: !Ref Bucket
        S3ObjectsFunctionArn: !GetAtt S3ObjectsFunction.Arn
        PowertoolsLayer: !Ref PowertoolsLayer
        CustomResourceHelperLayer: !Ref CustomResourceHelperLayer

  # Custom Resource --------------------------------------
  S3ObjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: '[Custom Resource] Create s3 objects from lambda layer'
      CodeUri: custom_resources/s3_objects/
      Layers: 
        - !Ref CustomResourceHelperLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'lambda:GetLayerVersion'
                - 's3:PutObject'
              Resource: '*'

  # Lambda Layers --------------------------------------
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'powertools-${AWS::StackName}'
      Description: AWS Lambda Powertools (Python)
      ContentUri: layers/powertools/
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  CustomResourceHelperLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'crhelper-${AWS::StackName}'
      Description: Custom Resource Helper
      ContentUri: layers/crhelper/
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  ElasticsearchClientLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'elasticsearch-client-${AWS::StackName}'
      Description: Python Elasticsearch Client
      ContentUri: layers/elasticsearch_client/
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  # Monitoring --------------------------------------
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'Monitering-${AWS::StackName}'
      DashboardBody: !Sub |
        {
          "start": "-PT6H",
          "periodOverride": "inherit",
          "widgets": [
              {
                "type": "metric",
                "x": 0,
                "y": 0,
                "width": 8,
                "height": 8,
                "properties":{
                    "metrics":[
                      [
                          "ECS/ContainerInsights/Prometheus", "fluentbit_output_proc_records_total",
                          "ClusterName", "${TwitterProducerStack.Outputs.ClusterName}",
                          "TaskGroup", "service:${TwitterProducerStack.Outputs.ServiceName}",
                          "name", "kinesis.0",
                          { "label": "FluentBit OutgoingRecords" }
                      ]
                    ],
                    "period": 300,
                    "stat": "Sum",
                    "region": "us-west-2",
                    "title": "Tweet producer containers",
                    "liveData": false,
                    "legend": {
                      "position": "bottom"
                    }
                }
              },
              {
                "type": "metric",
                "x": 8,
                "y": 0,
                "width": 8,
                "height": 8,
                "properties":{
                    "metrics":[
                      [
                          "AWS/Kinesis", "IncomingRecords",
                          "StreamName", "${TweetStream}",
                          { "label": "TweetStream IncomingRecords" }
                      ],
                      [
                          "Lambda/Custom", "ProcessingRecords",
                          "service", "AnalyticsFunction",
                          { "label": "AnalyticsFunction ProcessingRecords" }
                      ],
                      [
                          "Lambda/Custom", "OutgoingRecords",
                          "service", "AnalyticsFunction",
                          { "label": "AnalyticsFunction OutgoingRecords" }
                      ]
                    ],
                    "period": 300,
                    "stat": "Sum",
                    "region": "us-west-2",
                    "title": "Analytics process",
                    "liveData": false,
                    "legend": {
                      "position": "bottom"
                    }
                }
              },
              {
                "type": "metric",
                "x": 16,
                "y": 0,
                "width": 8,
                "height": 8,
                "properties":{
                    "metrics":[
                      [
                          "AWS/Kinesis", "IncomingRecords",
                          "StreamName", "${IndexingStream}",
                          { "label": "IndexingStream IncomingRecords" }
                      ],
                      [
                          "Lambda/Custom", "ProcessingRecords",
                          "service", "IndexingFunction",
                          { "label": "IndexingFunction ProcessingRecords" }
                      ],
                      [
                          "Lambda/Custom", "ErrorRecords",
                          "service", "IndexingFunction",
                          { "label": "IndexingFunction ErrorRecords" }
                      ],
                      [
                          "AWS/ES", "IndexingRate",
                          "DomainName", "${ElasticsearchStack.Outputs.Elasticsearch}",
                          "ClientId", "${AWS::AccountId}",
                          { "label": "Elasticsearch IndexingRate" }
                      ],
                      [
                          "AWS/ES", "IndexingLatency",
                          "DomainName", "${ElasticsearchStack.Outputs.Elasticsearch}",
                          "ClientId", "${AWS::AccountId}",
                          { "label": "Elasticsearch IndexingLatency", "stat": "Average", "yAxis": "right" }
                      ]
                    ],
                    "period": 300,
                    "stat": "Sum",
                    "region": "us-west-2",
                    "title": "Elasticsearch indexing",
                    "liveData": false,
                    "legend": {
                      "position": "bottom"
                    }
                }
              },
              {
                "type": "metric",
                "x": 0,
                "y": 8,
                "width": 8,
                "height": 8,
                "properties":{
                    "metrics":[
                      [
                          "AWS/Kinesis", "IncomingRecords",
                          "StreamName", "${TweetStream}",
                          { "label": "TweetStream", "stat": "Average", "yAxis": "right" }
                      ]
                    ],
                    "period": 300,
                    "stat": "Sum",
                    "region": "us-west-2",
                    "title": "[Live] Tweet Analytics",
                    "liveData": false,
                    "legend": {
                      "position": "bottom"
                    }
                }
              },
              {
                "type": "metric",
                "x": 8,
                "y": 8,
                "width": 8,
                "height": 8,
                "properties":{
                    "metrics":[
                      [
                          "AWS/Lambda", "Invocations",
                          "FunctionName", "${ElasticsearchStack.Outputs.IndexingFunction}",
                          { "label": "IndexingFunction" }
                      ],
                      [
                          "AWS/Kinesis", "IncomingRecords",
                          "StreamName", "${IndexingStream}",
                          { "label": "IndexingStream", "yAxis": "right" }
                      ]
                    ],
                    "period": 300,
                    "stat": "Sum",
                    "region": "us-west-2",
                    "title": "Elasticsearch Indexing",
                    "liveData": false,
                    "legend": {
                      "position": "bottom"
                    }
                }
              },
              {
                "type": "metric",
                "x": 0,
                "y": 16,
                "width": 8,
                "height": 8,
                "properties":{
                    "metrics":[
                      [
                          "AWS/Lambda", "Invocations",
                          "FunctionName", "${AnalyticsFunctionForBatch}",
                          { "label": "AnalyticsFunction" }
                      ],
                      [
                          "AWS/Kinesis", "IncomingRecords",
                          "StreamName", "${TweetStreamForBatch}",
                          { "label": "TweetStream", "yAxis": "right" }
                      ]
                    ],
                    "period": 300,
                    "stat": "Sum",
                    "region": "us-west-2",
                    "title": "[Batch] Tweet Analytics",
                    "liveData": false,
                    "legend": {
                      "position": "bottom"
                    }
                }
              }
          ]
        }

Outputs:

  S3ConsoleUrl:
    Description: S3 Console URL
    Value: !Sub 'https://s3.console.aws.amazon.com/s3/buckets/${Bucket}/?region=${AWS::Region}&tab=overview'

  CognitoConsoleUrl:
    Description: Cognito Console URL
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cognito/users?region=${AWS::Region}#/pool/${UserPool}/details'

  KibanaUrl:
    Description: Kibana URL
    Value: !Sub 'https://${ElasticsearchStack.Outputs.ElasticsearchDomainEndpoint}/_plugin/kibana/app/kibana'

  LabelingPortalUrl:
    Description: Labeling Portal URL
    Value: !GetAtt LabelingStack.Outputs.LabelingPortalUrl
